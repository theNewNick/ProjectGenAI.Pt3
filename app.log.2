2024-12-08 11:30:00,636 DEBUG: Agent adjustments after sanity check: {'sector_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'industry_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'sub_industry_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'scenario_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'company_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'feedback_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'historical_data_agent': {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'sentiment_agent': {'revenue_growth_rate': 0.07, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.09, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2}, 'sanity_check_agent': {'revenue_growth_rate': 0.0525, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.09874999999999999, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.19999999999999998}} [in /home/ec2-user/financial_modeling_assistant/app.py:997]
2024-12-08 11:30:00,637 DEBUG: Getting agent importance weights [in /home/ec2-user/financial_modeling_assistant/app.py:821]
2024-12-08 11:30:00,637 DEBUG: Calling OpenAI API with prompt: 
You are a financial expert. Assign an importance weight between 0 and 1 to each of the following agents based on their role in providing financial assumptions for a DCF model. Consider that historical data is a strong indicator of future performance.

- sector_agent
- industry_agent
- sub_industry_agent
- scenario_agent
- company_agent
- feedback_agent
- historical_data_agent
- sentiment_agent

The sum of all importance weights should equal 1.

Provide the weights in valid JSON format like this:

{
  "sector_agent": ...,
  "industry_agent": ...,
  "sub_industry_agent": ...,
  "scenario_agent": ...,
  "company_agent": ...,
  "feedback_agent": ...,
  "historical_data_agent": ...,
  "sentiment_agent": ...
}

Do not include any comments or extra text.
... [in /home/ec2-user/financial_modeling_assistant/app.py:207]
2024-12-08 11:30:00,695 ERROR: Error in OpenAI API call [in /home/ec2-user/financial_modeling_assistant/app.py:221]
Traceback (most recent call last):
  File "/home/ec2-user/financial_modeling_assistant/app.py", line 209, in call_openai_api
    response = openai.ChatCompletion.create(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.AuthenticationError: Incorrect API key provided: sk-proj-********************************************************************************************************************************************************G4gA. You can find your API key at https://platform.openai.com/account/api-keys.
2024-12-08 11:30:00,695 DEBUG: Agent importance weights: {} [in /home/ec2-user/financial_modeling_assistant/app.py:859]
2024-12-08 11:30:00,695 DEBUG: Running validation agent [in /home/ec2-user/financial_modeling_assistant/app.py:863]
2024-12-08 11:30:00,695 DEBUG: Calling OpenAI API with prompt: 
You are a Validation Agent tasked with reviewing and validating the financial assumptions provided by each agent. Your objectives are:

1. **Reasoning**: For each financial assumption, compare the values from all agents. Highlight agreements and discrepancies, especially where they diverge from historical data provided by the historical_data_agent. Consider:

   - Adherence to specified ranges.
   - Consistency with sector, industry, and company specifics.
   - Logical coherence among the assumptions.

2. **Confidence Scoring**: Assign a confidence score between 0 and 1 to each agent's output, reflecting:

   - Accuracy and reliability of the data.
   - Alignment with historical trends and current market conditions.
   - The agent's domain expertise.

3. **Output**: Provide your detailed reasoning and the confidence scores in valid JSON format:

{
    "reasoning": "Your detailed reasoning here...",
    "confidence_scores": {
        "sector_agent": ...,
        "industry_agent": ...,
... [in /home/ec2-user/financial_modeling_assistant/app.py:207]
2024-12-08 11:30:00,749 ERROR: Error in OpenAI API call [in /home/ec2-user/financial_modeling_assistant/app.py:221]
Traceback (most recent call last):
  File "/home/ec2-user/financial_modeling_assistant/app.py", line 209, in call_openai_api
    response = openai.ChatCompletion.create(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/home/ec2-user/financial_modeling_assistant/venv/lib64/python3.9/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.AuthenticationError: Incorrect API key provided: sk-proj-********************************************************************************************************************************************************G4gA. You can find your API key at https://platform.openai.com/account/api-keys.
2024-12-08 11:30:00,750 DEBUG: Computing final adjustments with agents [in /home/ec2-user/financial_modeling_assistant/app.py:909]
2024-12-08 11:30:00,750 DEBUG: Final adjustments: {'revenue_growth_rate': 0, 'tax_rate': 0, 'cogs_pct': 0, 'wacc': 0, 'terminal_growth_rate': 0, 'operating_expenses_pct': 0} [in /home/ec2-user/financial_modeling_assistant/app.py:924]
2024-12-08 11:30:00,750 DEBUG: Final adjustments after weighting: {'revenue_growth_rate': 0, 'tax_rate': 0, 'cogs_pct': 0, 'wacc': 0, 'terminal_growth_rate': 0, 'operating_expenses_pct': 0} [in /home/ec2-user/financial_modeling_assistant/app.py:1002]
2024-12-08 11:30:00,750 DEBUG: Validation reasoning: , Confidence scores: {} [in /home/ec2-user/financial_modeling_assistant/app.py:1003]
2024-12-08 11:30:00,750 DEBUG: Final assumptions passed to DCFModel: {'revenue_growth_rate': 0.05, 'tax_rate': 0.21, 'cogs_pct': 0.6, 'wacc': 0.1, 'terminal_growth_rate': 0.02, 'operating_expenses_pct': 0.2038223552143872, 'shares_outstanding': 80440000.0, 'depreciation_pct': 0.018708789762944808, 'capex_pct': -0.03292608659694603, 'nwc_pct': -0.023364183839948274} [in /home/ec2-user/financial_modeling_assistant/app.py:1205]
2024-12-08 11:30:00,757 DEBUG: Running DCF model [in /home/ec2-user/financial_modeling_assistant/app.py:1079]
2024-12-08 11:30:00,757 DEBUG: Projecting FCF [in /home/ec2-user/financial_modeling_assistant/app.py:1020]
2024-12-08 11:30:00,761 DEBUG: Year 1: Projected Revenue = 698286750000.0, FCF = 134732928500.0 [in /home/ec2-user/financial_modeling_assistant/app.py:1055]
2024-12-08 11:30:00,763 DEBUG: Year 2: Projected Revenue = 733201087500.0, FCF = 141469574925.0 [in /home/ec2-user/financial_modeling_assistant/app.py:1055]
2024-12-08 11:30:00,764 DEBUG: Year 3: Projected Revenue = 769861141875.0001, FCF = 148543053671.25003 [in /home/ec2-user/financial_modeling_assistant/app.py:1055]
2024-12-08 11:30:00,765 DEBUG: Year 4: Projected Revenue = 808354198968.7501, FCF = 155970206354.81253 [in /home/ec2-user/financial_modeling_assistant/app.py:1055]
2024-12-08 11:30:00,766 DEBUG: Year 5: Projected Revenue = 848771908917.1877, FCF = 163768716672.5532 [in /home/ec2-user/financial_modeling_assistant/app.py:1055]
2024-12-08 11:30:00,766 DEBUG: Calculating terminal value with wacc=0.1, terminal_growth_rate=0.02, last_fcf=163768716672.5532 [in /home/ec2-user/financial_modeling_assistant/app.py:1061]
2024-12-08 11:30:00,766 DEBUG: Discounting cash flows [in /home/ec2-user/financial_modeling_assistant/app.py:1065]
2024-12-08 11:30:00,766 DEBUG: Calculating intrinsic value [in /home/ec2-user/financial_modeling_assistant/app.py:1073]
2024-12-08 11:30:00,766 DEBUG: Fetching DCF model results [in /home/ec2-user/financial_modeling_assistant/app.py:1086]
